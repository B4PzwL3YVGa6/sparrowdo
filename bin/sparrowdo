use Terminal::ANSIColor;
use JSON::Tiny;
use Sparrowdo;
use Sparrowdo::Core::DSL::User;
use Sparrowdo::Core::DSL::Group;
use Sparrowdo::Core::DSL::File;
use Sparrowdo::Core::DSL::Directory;
use Sparrowdo::Core::DSL::Template;
use Sparrowdo::Core::DSL::Package;
use Sparrowdo::Core::DSL::CPAN::Package;
use Sparrowdo::Core::DSL::Service;
use Sparrowdo::Core::DSL::Bash;
use Sparrowdo::Core::DSL::Ssh;
use Sparrowdo::Core::DSL::Assert;
use Config::Simple;

sub MAIN (

  Str  :$host!, 
  Str  :$sparrowfile, 
  Str  :$http_proxy, 
  Str  :$https_proxy, 
  Str  :$ssh_user, 
  Str  :$ssh_private_key, 
  Int  :$ssh_port = 22, 
  Bool :$verbose = False, 
  Bool :$bootstrap = False, 
  Bool :$check_syntax = False, 
  Str  :$module_run,
       :$task_run, 
  Bool :$no_sudo = False,
  Bool :$no_color = False,
  Bool :$no_index_update = False,
  Str  :$sparrow_root, 
  Str  :$repo,
  Bool :$local_mode = False 
)
{

  # read config if exists
  my $conf-ini-file = '/home/' ~ %*ENV<USER> ~ '/sparrowdo.ini';
  my $conf-ini = $conf-ini-file.IO ~~ :e ?? Config::Simple.read($conf-ini-file,:f<ini>) !! Hash.new;
  
  # dirty hacks to pass command line parameter into sparrowfile context
  # sorry for not knowing perl6 idioms ... ));

  my $verbose_val = $verbose;

  $verbose_val = True if $conf-ini<sparrowdo><verbose> && ! $verbose_val;
    
  my $no_index_update_val = $no_index_update;

  $no_index_update_val = True if $conf-ini<sparrowdo><no_index_update> && ! $no_index_update_val;

  my $repo_val = $repo;

  $repo_val = $conf-ini<sparrowdo><repo> if $conf-ini<sparrowdo><repo> && ! $repo_val;
  
  set_input_params %(  
    Host => $host, 
    Sparrowfile => $sparrowfile,
    LocalMode => $local_mode, 
    HttpProxy => $http_proxy, 
    HttpsProxy => $https_proxy, 
    SshPort => $ssh_port, 
    SshUser => $ssh_user, 
    SshPrivateKey => $ssh_private_key, 
    Verbose => $verbose_val,
    NoSudo => $no_sudo,
    NoColor => $no_color,
    NoIndexUpdate => $no_index_update_val,
    SparrowRoot => $sparrow_root,
    Repo => $repo_val
  );

  bootstrap() if $bootstrap;

  say colored('running sparrow tasks on ' ~ $host ~ ' ... ', 'bold black on_yellow');

  ssh_shell 'rm -rf /tmp/sparrow-cache/; mkdir -m 777 -p /tmp/sparrow-cache/ && mkdir -m 777 -p /tmp/sparrow-cache/plugins && mkdir -m 777 -p /tmp/sparrow-cache/files && echo print os | perl -MOutthentic  > /tmp/sparrow-cache/os.txt';

  _scp "/tmp/sparrow-cache/os.txt", "/tmp/target_os", 1; # copy back /tmp/os.txt 

  set_target_os slurp "/tmp/target_os";

  say colored('target OS is - '~ target_os, 'black on_white');

  if 'config.pl6'.IO.e {
    say colored('load configuration from config.pl6 ...', 'blue on_green');
    config_set(EVALFILE 'config.pl6'); 
  }


  if $module_run {
    module_run $module_run;
  } elsif $task_run {
    plg-run($task_run);
  } else {
    EVALFILE $sparrowfile||'sparrowfile';
  }

  exit if $check_syntax;

  if get_spl() {

    if input_params('Verbose') {
      say colored( 'puplating SPL file', 'bold yellow on_cyan' );
    }

    spurt '/tmp/sparrowdo/sparrow.list', get_spl().join: "\n";
    _scp '/tmp/sparrowdo/sparrow.list', '/tmp/sparrow-cache/';
    ssh_shell 'mkdir -p /opt/sparrow && mv  /tmp/sparrow-cache/sparrow.list /opt/sparrow';
    say colored('copied SPL file as /opt/sparrow/sparrow.list - OK', 'bold green on_black');

  }

  if $repo_val {
    ssh_shell "echo repo: $repo_val > /tmp/sparrow-cache/sparrow.yaml";
    say colored("set custom repo to $repo_val - OK", 'bold green on_black');
  }

  ssh_shell 'sparrow index update' unless input_params('NoIndexUpdate');

  # plugins mode
  if ($task_run) {
    mkdir '/tmp/sparrowdo/';
    mkdir '/tmp/sparrowdo/plugins';
    for plg-list() -> @p {
      ssh_shell "sparrow plg install " ~ @p[0];
      if @p[1] {
        spurt "/tmp/sparrowdo/plugins/@p[0].args", @p[1].join: "\n";
        _scp "/tmp/sparrowdo/plugins/@p[0].args", '/tmp/sparrow-cache/plugins';
        ssh_shell "sparrow plg run " ~ @p[0] ~ ' --args-file ' ~ '/tmp/sparrow-cache/plugins/' ~ "@p[0].args";
      } else {
        ssh_shell "sparrow plg run " ~ @p[0];
      }
    } 
    # task box mode  
  } else {
    mkdir '/tmp/sparrowdo/';
    spurt "/tmp/sparrowdo/task-box$*PID.json", (to-json get_tasks());
    _scp "/tmp/sparrowdo/task-box$*PID.json", "/tmp/sparrow-cache/";
    say colored("set up task box file - /tmp/sparrowdo/task-box$*PID.json - OK", 'bold green on_black');
    ssh_shell "sparrow box run /tmp/sparrow-cache/task-box$*PID.json --mode quiet --purge-cache";
  }

}

sub ssh_shell ( $cmd ) {


  my @bash_commands = ( 'export LC_ALL=en_US.UTF-8' );


  @bash_commands.push:  'export http_proxy=' ~ input_params('HttpProxy') if input_params('HttpProxy');
  @bash_commands.push:  'export https_proxy=' ~ input_params('HttpsProxy') if input_params('HttpsProxy');
  @bash_commands.push:  'export GIT_PROTOCOL=https';
  @bash_commands.push:  'export PATH=/sbin/:/usr/local/bin:/usr/sbin/:$PATH';
  @bash_commands.push:  'export SPARROW_ROOT=' ~ ( input_params('SparrowRoot') || '/opt/sparrow' );
  @bash_commands.push:  'export SPARROW_NO_COLOR=1' if input_params('NoColor');
  @bash_commands.push:  'export SPARROW_CONF_PATH=/tmp/sparrow-cache/sparrow.yaml';

  @bash_commands.push:  $cmd;

  my $ssh_cmd;

  if ! input_params('LocalMode') {

    my $ssh_host_term = input_params('Host');
  
    $ssh_host_term = input_params('SshUser') ~ '@' ~ $ssh_host_term if input_params('SshUser');
  
    $ssh_cmd  =  'ssh -o ConnectionAttempts=1  -o ConnectTimeout=5';
  
    $ssh_cmd ~= ' -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -tt';
  
    $ssh_cmd ~= ' -q' unless input_params('Verbose');
  
    $ssh_cmd ~= ' -p ' ~ input_params('SshPort') ~ ' ' ~ $ssh_host_term;
  
    $ssh_cmd ~= ' -i ' ~ input_params('SshPrivateKey') if input_params('SshPrivateKey');
  
    $ssh_cmd ~= ( input_params('NoSudo') ) ?? " \"bash -c '" !! " \"sudo bash -c '"; 
  
    $ssh_cmd ~=  ~ ( join ' ; ', @bash_commands ) ~ "'\"";
  
    $ssh_cmd ~= ' 2>/dev/null' unless input_params('Verbose');
  
  } else {

    $ssh_cmd = ( input_params('NoSudo') ) ?? "bash -c '" !! "sudo bash -c '"; 

    $ssh_cmd ~=  ~ ( join ' ; ', @bash_commands ) ~ "'";
  
    $ssh_cmd ~= ' 2>/dev/null' unless input_params('Verbose');

  }

  say colored($ssh_cmd, 'bold green') if input_params('Verbose');

  shell $ssh_cmd;

}

our sub _copy-local-file ( $file, $dest ) {

  say colored("copy local file $file to remote $dest", 'bold yellow');
  _scp($file,$dest);

}


our sub _scp ( $file, $dest, $reverse = 0 ) {

  my $ssh_host_term = input_params('Host');

  $ssh_host_term = input_params('SshUser') ~ '@' ~ $ssh_host_term if input_params('SshUser');

  my $scp_command;

  if ! input_params('LocalMode') {

    my $scp_params = ' -P ' ~ input_params('SshPort');
  
    $scp_params ~= ' -i' ~ input_params('SshPrivateKey') if input_params('SshPrivateKey');
  
    $scp_params ~= ' -q'  unless input_params('Verbose');
  
    $scp_command = 'scp -o ConnectionAttempts=1 -o ConnectTimeout=5 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ' ~ $scp_params;
  
    if $reverse {
      $scp_command ~= ' ' ~ $ssh_host_term ~ ':' ~ $file ~ ' ' ~ $dest ;
    } else {
      $scp_command ~= ' ' ~ $file ~ ' ' ~ $ssh_host_term ~ ':' ~ $dest;
    }
  } else {

    $scp_command = 'cp';
  
    if $reverse {
      $scp_command ~= ' '~ $file ~ ' ' ~ $dest ;
    } else {
      $scp_command ~= ' ' ~ $file ~ ' ' ~ $dest;
    }
  }

  say colored($scp_command, 'bold green') if input_params('Verbose');

  shell $scp_command;

}

sub bootstrap {

  say colored('running Sparrow bootstrap on ' ~ input_params('Host'), 'green on_red');
  ssh_shell 'if ! which perl 2>/dev/null; then yum -y install perl; fi';
  ssh_shell 'if ! which cpanm 2>/dev/null; then curl -kL http://cpanmin.us/ -o /bin/cpanm; chmod a+x /bin/cpanm; fi';
  ssh_shell 'if ! which sparrow 2>/dev/null; then yum -y install gcc perl-Digest-MD5 perl-Test-Harness perl-Data-Dumper perl-ExtUtils-MakeMaker perl-Hash-Merge; cpanm -q Outthentic Sparrow || cpanm -q Outthentic Sparrow; fi';
  ssh_shell 'cpanm -q --notest Outthentic Sparrow || cpanm --notest -q Outthentic Sparrow'; # forcefully upgrade Sparrow

}
