use Terminal::ANSIColor;
use JSON::Tiny;
use Sparrowdo;

sub MAIN (
  Str  :$host!, 
  Str  :$http_proxy, 
  Str  :$https_proxy, 
  Str  :$ssh_user, 
  Str  :$ssh_private_key, 
  Int  :$ssh_port = 22, 
  Bool :$verbose = False, 
  Bool :$bootstrap = False, 
  Str  :$module_run, 

)
{

  
  # dirty hacks to pass command line parameter into sparrowfile context
  # sorry for not knowing perl6 idioms ... ));
  
  our $Sparrowdo::Host = $host; 
  our $Sparrowdo::HttpProxy = $http_proxy; 
  our $Sparrowdo::HttpsProxy = $https_proxy; 
  our $Sparrowdo::SshPort = $ssh_port; 
  our $Sparrowdo::SshUser = $ssh_user; 
  our $Sparrowdo::SshPrivateKey = $ssh_private_key; 
  our $Sparrowdo::Verbose = $verbose; 

  our @Sparrowdo::Tasks = Array.new;
  our @Sparrowdo::SPL = Array.new;


  bootstrap() if $bootstrap;

  say colored('running sparrow tasks on ' ~ $host ~ ' ... ', 'bold black on_yellow');

  if $module_run {
    module_run $module_run;
  } else {
    EVALFILE "sparrowfile";
  }

  spurt '/tmp/sparrowdo-box.json', (to-json @Sparrowdo::Tasks);

  scp '/tmp/sparrowdo-box.json', '/tmp/';

  say colored('set up task box file - /tmp/sparrowdo-box.json - OK', 'bold green on_blue');


  if @Sparrowdo::SPL {


    if $Sparrowdo::Verbose {

      say colored( 'puplating SPL file', 'bold yellow on_cyan' );

      for @Sparrowdo::SPL.kv -> $index, $item { 
        say colored(($index+1) ~ '. ' ~ $item , 'bold yellow on_cyan');
      }
    }

    spurt '/tmp/sparrow.list', @Sparrowdo::SPL.join: "\n";
    scp '/tmp/sparrow.list', '/tmp/';
    ssh_shell 'mkdir -p /opt/sparrow && mv  /tmp/sparrow.list /opt/sparrow';
    say colored('copied SPL file as /opt/sparrow/sparrow.list - OK', 'bold green on_blue');

  }

  ssh_shell 'sparrow index update';
  ssh_shell 'sparrow box run /tmp/sparrowdo-box.json --mode quiet';

}

sub ssh_shell ( $cmd ) {


  my @bash_commands = ( 'export LC_ALL=en_US.UTF-8' );


  @bash_commands.push:  'export http_proxy=' ~ $Sparrowdo::HttpProxy if $Sparrowdo::HttpProxy;
  @bash_commands.push:  'export https_proxy=' ~ $Sparrowdo::HttpsProxy if $Sparrowdo::HttpsProxy;
  @bash_commands.push:  'export GIT_PROTOCOL=https';
  @bash_commands.push:  'export PATH=/sbin/:/usr/local/bin:/usr/sbin/:$PATH';
  @bash_commands.push:  'export SPARROW_ROOT=/opt/sparrow';
  @bash_commands.push:  $cmd;

  my $ssh_host_term = $Sparrowdo::Host;

  $ssh_host_term = $Sparrowdo::SshUser ~ '@' ~ $ssh_host_term if $Sparrowdo::SshUser;

  my $ssh_cmd  =  'ssh -o ConnectionAttempts=1  -o ConnectTimeout=5';

  $ssh_cmd ~= ' -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -tt';

  $ssh_cmd ~= ' -q' unless $Sparrowdo::Verbose;

  $ssh_cmd ~= ' -p ' ~ $Sparrowdo::SshPort ~ ' ' ~ $ssh_host_term;

  $ssh_cmd ~= ' -i ' ~ $Sparrowdo::SshPrivateKey if $Sparrowdo::SshPrivateKey;

  $ssh_cmd ~= " \"sudo bash -c '" ~ ( join ' ; ', @bash_commands ) ~ "'\"";

  $ssh_cmd ~= ' 2>/dev/null' unless $Sparrowdo::Verbose;

  say colored($ssh_cmd, 'bold green') if $Sparrowdo::Verbose;

  shell $ssh_cmd;

}

sub scp ( $file, $dest ) {

  my $ssh_host_term = $Sparrowdo::Host;

  $ssh_host_term = $Sparrowdo::SshUser ~ '@' ~ $ssh_host_term if $Sparrowdo::SshUser;

  my $scp_params = ' -P ' ~ $Sparrowdo::SshPort;

  $scp_params ~= ' -i' ~ $Sparrowdo::SshPrivateKey if $Sparrowdo::SshPrivateKey;

  $scp_params ~= ' -q'  unless $Sparrowdo::Verbose;

  my $scp_command = 'scp -o ConnectionAttempts=1 -o ConnectTimeout=5 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no '~ $scp_params ~ ' ' ~ $file ~ ' ' ~ $ssh_host_term ~ ':' ~ $dest;

  say $scp_command;
  say colored($scp_command, 'bold green') if $Sparrowdo::Verbose;

  shell $scp_command;

}

sub bootstrap {

  say colored('running Sparrow bootstrap on ' ~ $Sparrowdo::Host, 'green on_red');
  ssh_shell 'if ! which cpanm 2>/dev/null; then curl -kL http://cpanmin.us/ -o /bin/cpanm; chmod a+x /bin/cpanm; fi';
  ssh_shell 'if ! which sparrow 2>/dev/null; then yum -y install perl-ExtUtils-MakeMaker perl-Hash-Merge; cpanm -q Sparrow; fi';
  ssh_shell 'cpanm -q Sparrow || cpanm -q Sparrow'; # forcefully upgrade sparrow

}
